<?php
/**
 * Webwork
 * Copyright (C) 2011 IceFlame.net
 *
 * Permission to use, copy, modify, and/or distribute this software for
 * any purpose with or without fee is hereby granted, provided that the
 * above copyright notice and this permission notice appear in all copies.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 * WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 * MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE
 * FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY
 * DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER
 * IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING
 * OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
 *
 * @package     Webwork
 * @version     0.1-dev
 * @link        http://www.iceflame.net
 * @license     ISC License (http://www.opensource.org/licenses/ISC)
 */
 
/**
 * Class for managing a database connection
 * 
 * @method   bool connect()
 *             Connects to the database server and selects the database using the given configuration
 * @method   void disconnect()
 *             Closes the database connection
 * @method   mixed query(string $query, array $vars = null)
 *             Performs an (optionally prepared) query on the database
 * @method   object select(string $table, string $columns = '*', array $params = array())
 *             Performs a SELECT query
 * @method   bool insert(string $table, array $data)
 *             Performs an INSERT query
 * @method   bool update(string $table, array $data, array $params = array())
 *             Performs an UPDATE query
 * @method   bool importDump(string $file, array $vars = null)
 *             Parses and executes a SQL dump file
 * @method   int affectedRows()
 *             Returns the number of rows affected by the last INSERT, UPDATE, REPLACE or DELETE query
 * @method   int insertID()
 *             Returns the ID generated by a query on a table with a column having the AUTO_INCREMENT attribute
 * @method   void startTransaction()
 *             Starts a transaction
 * @method   void endTransaction()
 *             Ends a transaction and commits remaining queries
 * @method   bool commit()
 *             Commits the current transaction
 * @method   bool rollback()
 *             Rolls back the current transaction
 * @method   string quote(string $string)
 *             Escapes special characters in a string for use in an SQL statement
 * @method   string getError()
 *             Returns the last error message for the most recent query that can succeed or fail
 * @method   int getQueryCount()
 *             Returns the number of already executed SQL operations
 *
 * @see      Database_Base_Connection
 * @author   Christian Neff <christian.neff@gmail.com>
 */
class Database_Connection {
    
    /**
     * Name of the used driver
     * @var      string
     * @access   private
     */
    private $_driverName;

    /**
     * The driver instance
     * @var      object
     * @access   private
     */
    private $_instance;

    /**
     * Opens a new database connection
     * @param    string   $driver     The database driver to use
     * @param    string   $host       The database server host, mostly 'localhost'
     * @param    string   $user       The username for authenticating at the database server
     * @param    string   $password   The password for authenticating at the database server
     * @param    string   $database   The name of the database
     * @param    string   $prefix     The prefix of the database tables
     * @return   void
     * @access   public
     */
    public function __construct($driver, $host, $user, $password, $database, $prefix) {
        if (!is_string($driver) || empty($driver))
            trigger_error('Database driver name invalid', E_USER_ERROR);

        $driver_class = "Database_{$driver}_Connection";

        if (!class_exists($driver_class))
            trigger_error('Database driver "'.$driver.'" not available', E_USER_ERROR);

        $this->_driverName = $driver;
        
        $this->_instance = new $driver_class($host, $user, $password, $database, $prefix);
    }

    /**
     * Magically calls driver methods
     * @method   string   $method      The called method
     * @method   array    $arguments   The method arguments
     * @return   mixed
     * @access   public
     */
    public function __call($method, $arguments) {
        if (method_exists($this->_instance, $method)) {
            return call_user_func_array([$this->_instance, $method], $arguments);
        } else {
            throw new BadMethodCallException('Database driver "'.$this->_driverName.'" does not support the '.$method.'() method');
        }
    }
    
    /**
     * Returns the name of the used driver
     * @return   string
     * @access   public
     */
    public function getDriverName() {
        return $this->_driverName;
    }

}
